name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET: 'nr-clone'
  DEPOT_REPO: 'https://github.com/jportasa/depot' # Script to push .deb to APT repo
  DYNAMO_TABLE_NAME: 's3-repo-lock'
  #DOCKERHUB_NAMESPACE: 'jportasa'
  #DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  #DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
  #FASTLY_SERVICE_ID: '2RMeBJ1ZTGnNJYvrWMgQhk'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.9.7'
  GPG_MAIL: 'info@newrelic.com'
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  INTEGRATION: "redis"
  ORIGINAL_REPO_NAME: 'newrelic/nri-redis'
  PFX_CERTIFICATE_BASE64: ${{ secrets.PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'Contoso'
  PFX_PASSPHRASE:  ${{ secrets.PFX_PASSPHRASE }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}

jobs:

#  validate:
#    name: Validate code via linters
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Validate code
#        run: make ci/validate
#
#  snyk:
#    name: Run security checks via snyk
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Scan code for vulnerabilities
#        run: make ci/snyk-test
#
#  test-nix:
#    name: Run unit tests on *Nix
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Unit tests
#        run: make ci/test
#
#  test-windows:
#    name: Run unit tests on Windows
#    runs-on: windows-2019
#    env:
#      GOPATH: ${{ github.workspace }}
#    defaults:
#      run:
#        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
#      - name: Install Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: ${{env.GO_VERSION}}
#      - name: Running unit tests
#        shell: pwsh
#        run: |
#          .\build\windows\unit_tests.ps1
#
#  # can't run this step inside of container because of tests specific
#  test-integration-nix:
#    name: Run integration tests on *Nix
#    runs-on: ubuntu-20.04
#    defaults:
#      run:
#        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 1
#          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
#      - name: Install Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: ${{env.GO_VERSION}}
#      - name: Integration test
#        env:
#          GOPATH: ${{ github.workspace }}
#        run: make integration-test

  prerelease:
    name: Build binary for *Nix/Win, create archives for *Nix/Win, create packages for *Nix, upload all artifacts into GH Release assets
    runs-on: ubuntu-20.04
#    needs: [validate, test-nix, test-windows, snyk, test-integration-nix]
    steps:
      - uses: actions/checkout@v2
      - name: Pre release
        run: make ci/prerelease
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":shit: Repo: ${{ env.REPO_FULL_NAME }}, prerelease for nix FAILURE!"

  package-win:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [prerelease]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/${{env.ORIGINAL_REPO_NAME}}
    strategy:
      matrix:
        goarch: [amd64,386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/${{env.ORIGINAL_REPO_NAME}}
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
      - name: Download zip from GH Release assets and extract .exe
        shell: pwsh
        run: |
          build\windows\download_zip_extract_exe.ps1 "$env:INTEGRATION" ${{ matrix.goarch }} "$env:TAG" "$env:REPO_FULL_NAME"
      - name: Create MSI
        shell: pwsh
        run: |
          build\windows\package_msi.ps1 -integration "$env:INTEGRATION" -arch ${{ matrix.goarch }} -tag "$env:TAG" -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      - name: Upload MSI to GH
        shell: bash
        run: |
          build/windows/upload_msi.sh ${INTEGRATION} ${{ matrix.goarch }} ${TAG}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_TOKEN }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ":shit: Repo: ${{ env.REPO_FULL_NAME }}, prerelease for Windows FAILURE!"

  s3-apt-prerelease:
    name: S3 repo APT update prerelease (tests dir)
    if: github.event.action == 'prereleased'
    needs: [prerelease]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    env:
      BASE_PATH: "infrastructure_agent/test/linux/apt"
      LOCK_REPO_TYPE: 'apt' # yum | apt | zypp | win
    steps:
    - uses: actions/checkout@v2
    - name: Update APT repo
      run: |
        source build/locking_s3.sh
        create_dynamo_table
        wait_free_lock
        lock
        docker-compose --file build/docker/docker_compose_apt_updater.yml run service
        release_lock

  s3-yum-prerelease:
    name: S3 YUM update prerelease (tests dir)
    if: github.event.action == 'prereleased'
    needs: [prerelease]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    env:
      BASE_PATH: "/infrastructure_agent/test/linux/yum/el"
      LOCK_REPO_TYPE: 'yum' # yum | apt | zypp | win
      OS_VERSIONS: '5,6,7,8'
      ARCH: 'x86_64,arm,arm64'
    steps:
    - uses: actions/checkout@v2
    - name: Upload & update YUM repo
      run: |
        source build/locking_s3.sh
        create_dynamo_table
        wait_free_lock
        lock
        docker-compose --file build/docker/docker_compose_yum_zypp_updater.yml run service
        release_lock

  s3-zypp-prerelease:
    name: S3 ZYPP update prerelease (tests dir)
    if: github.event.action == 'prereleased'
    needs: [prerelease]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    env:
      BASE_PATH: "/infrastructure_agent/test/linux/zypp/sles"
      LOCK_REPO_TYPE: 'zypp' # yum | apt | zypp | win
      OS_VERSIONS: '11.4,12.1,12.2,12.3,12.4'
      ARCH: 'x86_64,arm,arm64'
    steps:
    - uses: actions/checkout@v2
    - name: Upload & update ZYPP repo
      run: |
        source build/locking_s3.sh
        create_dynamo_table
        wait_free_lock
        lock
        docker-compose --file build/docker/docker_compose_yum_zypp_updater.yml run service
        release_lock

  s3-win-prerelease:
    name: S3 Windows .msi update prerelease (tests dir)
    if: github.event.action == 'prereleased'
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: [package-win]
    env:
      BASE_PATH: "/infrastructure_agent/test/windows/integrations"
      LOCK_REPO_TYPE: 'win' # yum | apt | zypp | win
      ARCH: 'amd64,386'
    steps:
    - uses: actions/checkout@v2
    - name: Upload MSI's
      run: |
        source build/locking_s3.sh
        create_dynamo_table
        wait_free_lock
        lock
        docker-compose --file build/docker/docker_compose_win_updater.yml run service
        release_lock
